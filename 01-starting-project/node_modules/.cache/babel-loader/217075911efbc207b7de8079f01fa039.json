{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\GitHub\\\\React_Complete_Guide\\\\01-starting-project\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from \"./cart-context\";\nimport { useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type == \"ADD\") {\n    const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const exisitngCartItemIndex = state.items.findIndex(item => item.id == action.item.id);\n    const existingCartItem = state.items[exisitngCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[exisitngCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    if (action.type == \"REMOVE\") {\n      const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n      const existingItem = state.items[existingCartItemIndex];\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\n      let updatedItems;\n\n      if (existingItem.amount === 1) {\n        updatedItems = state.items.filter(item => item.id !== action.id);\n      } else {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingCartItemIndex] = updatedItem;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemtoCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemtoCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/React_Complete_Guide/01-starting-project/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","newTotalAmount","item","price","amount","exisitngCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingCartItemIndex","existingItem","updatedTotalAmount","filter","CartProvider","props","cartState","dispatchCartAction","addItemtoCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import CartContext from \"./cart-context\";\r\nimport { useReducer } from \"react\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type == \"ADD\") {\r\n    const newTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    const exisitngCartItemIndex = state.items.findIndex(\r\n      (item) => item.id == action.item.id\r\n    );\r\n    const existingCartItem = state.items[exisitngCartItemIndex];\r\n\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n\r\n      updatedItems = [...state.items];\r\n      updatedItems[exisitngCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    if (action.type == \"REMOVE\") {\r\n      const existingCartItemIndex = state.items.findIndex(\r\n        (item) => item.id === action.id\r\n      );\r\n      const existingItem = state.items[existingCartItemIndex];\r\n      const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n\r\n      let updatedItems;\r\n      if (existingItem.amount === 1) {\r\n        updatedItems = state.items.filter((item) => item.id !== action.id);\r\n      } else {\r\n        const updatedItem = {\r\n          ...existingItem,\r\n          amount: existingItem.amount - 1,\r\n        };\r\n        updatedItems = [...state.items];\r\n        updatedItems[existingCartItemIndex] = updatedItem;\r\n      }\r\n\r\n      return {\r\n        items: updatedItems,\r\n        totalAmount: updatedTotalAmount,\r\n      };\r\n    }\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemtoCartHandler = (item) => {\r\n    dispatchCartAction({\r\n      type: \"ADD\",\r\n      item: item,\r\n    });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({\r\n      type: \"REMOVE\",\r\n      id: id,\r\n    });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemtoCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}